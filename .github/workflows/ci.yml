name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.12]
    
    services:
      # Redis service for any caching tests (future use)
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install and setup Ollama
      run: |
        # Install Ollama
        curl -fsSL https://ollama.ai/install.sh | sh
        
        # Start Ollama service in background
        ollama serve &
        
        # Wait for Ollama to be ready
        timeout 60 bash -c 'until curl -f http://localhost:11434/api/tags; do sleep 2; done'
        
        # Pull TinyLlama model
        ollama pull tinyllama
        
        # Verify model is available
        ollama list

    - name: Install Playwright browsers
      run: |
        playwright install --with-deps

    - name: Create models directory and train model
      run: |
        mkdir -p models
        python scripts/train_iris_model.py

    - name: Start Flask application
      run: |
        # Start Flask app in background
        python app.py &
        
        # Wait for Flask app to be ready
        timeout 60 bash -c 'until curl -f http://localhost:5001/health; do sleep 2; done'
        
        # Verify all endpoints are accessible
        curl -f http://localhost:5001/health
      env:
        FLASK_ENV: testing

    - name: Run unit and integration tests
      run: |
        python -m pytest tests/test_api_endpoints.py -v --tb=short --junit-xml=test-results-unit.xml
      env:
        PYTEST_CURRENT_TEST: true

    - name: Run end-to-end tests
      run: |
        python -m pytest tests/test_e2e_playwright.py -v --tb=short --junit-xml=test-results-e2e.xml
      env:
        PYTEST_CURRENT_TEST: true

    - name: Run all tests with coverage
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing --junit-xml=test-results-all.xml
      env:
        PYTEST_CURRENT_TEST: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results-*.xml
          htmlcov/

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true

    - name: Run Safety check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 mypy types-requests

    - name: Run Flake8 linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run MyPy type checking
      run: |
        mypy app.py scripts/ tests/ --ignore-missing-imports || true

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install and setup Ollama
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh
        ollama serve &
        timeout 60 bash -c 'until curl -f http://localhost:11434/api/tags; do sleep 2; done'
        ollama pull tinyllama

    - name: Install Playwright browsers
      run: |
        playwright install --with-deps

    - name: Create models and start application
      run: |
        mkdir -p models
        python scripts/train_iris_model.py
        python app.py &
        timeout 60 bash -c 'until curl -f http://localhost:5001/health; do sleep 2; done'

    - name: Run comprehensive integration tests
      run: |
        # Test all endpoints thoroughly
        python -m pytest tests/ -v -m "not security" --maxfail=1
        
        # Run security tests separately
        python -m pytest tests/ -v -m "security" --maxfail=1
        
        # Run load test if available
        if [ -f "scripts/test_load.py" ]; then
          python scripts/test_load.py
        fi

    - name: Test batch processing
      run: |
        # Test batch inference functionality
        python scripts/batch_inference.py --create-samples
        python scripts/batch_inference.py --input sample_prompts.txt --output test_results.json
        
        # Verify output
        test -f test_results.json
        python -c "import json; data = json.load(open('test_results.json')); print(f'Processed {len(data)} prompts')"

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, lint]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.lint.result == 'success' }}
      run: |
        echo "✅ All checks passed! Ready for deployment."

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.lint.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs."
        exit 1