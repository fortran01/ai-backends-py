[tool.black]
# Following the coding guidelines for Python/Flask projects
line-length = 127
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.pytest_cache
  | \.tox
  | \.venv
  | venv
  | htmlcov
  | models
  | \.github
)/
'''

[tool.isort]
# Following the coding guidelines for Python/Flask projects
profile = "black"
line_length = 127
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["venv/*", "models/*", ".github/*"]

[tool.mypy]
# Following the coding guidelines for Python/Flask projects
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Exclude directories
exclude = [
    "venv/",
    "models/",
    ".github/",
    ".pytest_cache/"
]

[[tool.mypy.overrides]]
module = [
    "onnxruntime.*",
    "skl2onnx.*",
    "sklearn.*",
    "numpy.*",
    "playwright.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Configuration already exists in pytest.ini, but this is for completeness
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--color=yes",
]
markers = [
    "unit: Unit tests for individual functions/classes",
    "integration: Integration tests for API endpoints", 
    "e2e: End-to-end tests using Playwright",
    "security: Security-focused tests (injection, validation)",
    "slow: Tests that take longer than 5 seconds",
    "requires_ollama: Tests that require Ollama service to be running",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["app", "scripts"]
omit = [
    "venv/*",
    "tests/*",
    "models/*",
    ".github/*",
    "run_tests.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]